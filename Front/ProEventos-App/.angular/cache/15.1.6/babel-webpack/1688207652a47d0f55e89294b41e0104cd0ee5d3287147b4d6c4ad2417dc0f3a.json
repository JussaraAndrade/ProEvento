{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/evento.service\";\nimport * as i2 from \"ngx-bootstrap/modal\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"ngx-spinner\";\nimport * as i5 from \"../../shared/titulo/titulo.component\";\nfunction EventosComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"p\");\n    i0.ɵɵtext(2, \"Tem certeza deletar esse evento?\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function EventosComponent_ng_template_2_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.confirm());\n    });\n    i0.ɵɵtext(4, \"Sim\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function EventosComponent_ng_template_2_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.decline());\n    });\n    i0.ɵɵtext(6, \"N\\u00E3o\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class EventosComponent {\n  // Injeta\n  constructor(eventoService, modalService, toastr, spinner) {\n    this.eventoService = eventoService;\n    this.modalService = modalService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.eventos = [];\n    this.eventosFiltrados = [];\n    this.larguraImagem = 150;\n    this.margemImagem = 2;\n    this.exibirImagem = true;\n    this.filtroListado = '';\n  }\n  /* Método que vai ser chamado antes de inicializar aplicação */\n  ngOnInit() {\n    this.spinner.show();\n    this.getEventos();\n  }\n  alterarImagem() {\n    this.exibirImagem = !this.exibirImagem;\n  }\n  get filtroLista() {\n    return this.filtroListado;\n  }\n  set filtroLista(value) {\n    this.filtroListado = value;\n    // Se filtroList tem valor? Se tem valor filtra. Se não tem não, não filtra!\n    this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n  }\n  // Filtro efetua a busca pelo tema e local\n  filtrarEventos(filtrarPor) {\n    filtrarPor = filtrarPor.toLocaleLowerCase();\n    // Pega todos os eventos e efeuta o filtro\n    return this.eventos.filter(\n    // Para cada evento dado, vai pegar o elemento evento o que você quer filtrar ex: tema ou local\n    // Exemplo 2: (evento: { tema: string, local: string })\n    evento => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 || evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1);\n  }\n  /*\r\n    Requisita do protocolo http do método get dentro da URL vai fazer o get e vai se inscrever no Observable,\r\n    nesse Observable retorna dois item principais que são response e error.\r\n  */\n  getEventos() {\n    this.eventoService.getEventos().subscribe({\n      next: eventos => {\n        this.eventos = eventos; // recebe o valores para atribuir em uma outra propriedes para refletir na tabela\n        this.eventosFiltrados = this.eventos;\n      },\n      error: error => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao Carregar os Eventos.', 'Erro!');\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n  openModal(template) {\n    this.modalRef = this.modalService.show(template, {\n      class: 'modal-sm'\n    });\n  }\n  confirm() {\n    this.modalRef?.hide();\n    this.toastr.success('O Evento foi deletado com Sucesso.', 'Deletado!');\n  }\n  decline() {\n    this.modalRef?.hide();\n  }\n}\nEventosComponent.ɵfac = function EventosComponent_Factory(t) {\n  return new (t || EventosComponent)(i0.ɵɵdirectiveInject(i1.EventoService), i0.ɵɵdirectiveInject(i2.BsModalService), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.NgxSpinnerService));\n};\nEventosComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: EventosComponent,\n  selectors: [[\"app-eventos\"]],\n  decls: 4,\n  vars: 3,\n  consts: [[3, \"titulo\", \"iconClass\", \"botaoListar\"], [\"template\", \"\"], [1, \"modal-body\", \"text-center\"], [\"type\", \"button\", 1, \"btn\", \"btn-default\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", 3, \"click\"]],\n  template: function EventosComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-titulo\", 0)(1, \"div\");\n      i0.ɵɵtemplate(2, EventosComponent_ng_template_2_Template, 7, 0, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"titulo\", \"Eventos\")(\"iconClass\", \"fa fa-calendar-alt\")(\"botaoListar\", true);\n    }\n  },\n  dependencies: [i5.TituloComponent],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","EventosComponent","constructor","eventoService","modalService","toastr","spinner","ngOnInit","show","getEventos","alterarImagem","exibirImagem","filtroLista","filtroListado","value","eventosFiltrados","filtrarEventos","eventos","filtrarPor","toLocaleLowerCase","filter","evento","tema","indexOf","local","subscribe","next","error","hide","complete","openModal","template","modalRef","class","confirm","success","decline","selectors","decls","vars","consts"],"sourceRoot":"","sources":["C:\\Users\\Jussara\\Desktop\\ProEventos\\Front\\ProEventos-App\\src\\app\\components\\eventos\\eventos.component.html","C:\\Users\\Jussara\\Desktop\\ProEventos\\Front\\ProEventos-App\\src\\app\\components\\eventos\\eventos.component.ts"],"sourcesContent":["<app-titulo [titulo]=\"'Eventos'\" [iconClass]=\"'fa fa-calendar-alt'\" [botaoListar]=\"true\"></app-titulo>\n\n\n<div>\n\n</div>\n<!-- Dica: ver o Json na tela ajuda na identificação da propriedades do objeto {{eventos | json}} -->\n\n<ng-template #template>\n  <div class=\"modal-body text-center\">\n    <p>Tem certeza deletar esse evento?</p>\n    <button type=\"button\" class=\"btn btn-default\" (click)=\"confirm()\">Sim</button>\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"decline()\">Não</button>\n  </div>\n</ng-template>\n","import { Component, OnInit, TemplateRef } from '@angular/core';\n\nimport { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';\n\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from 'ngx-spinner';\n\nimport { EventoService } from '../../services/evento.service';\nimport { Evento } from '../../models/Evento';\n\n@Component({\n  selector: 'app-eventos',\n  templateUrl: './eventos.component.html',\n  styleUrls: ['./eventos.component.scss']\n})\nexport class EventosComponent implements OnInit {\n  modalRef?: BsModalRef;\n  message?: string;\n\n  eventos: Evento[] = [];\n  eventosFiltrados: Evento[] = [];\n\n  larguraImagem: number = 150;\n  margemImagem: number = 2;\n  exibirImagem = true;\n  private filtroListado = '';\n\n  // Injeta\n  constructor(\n    private eventoService: EventoService,\n    private modalService: BsModalService,\n    private toastr: ToastrService,\n    private spinner: NgxSpinnerService\n  ) { }\n\n   /* Método que vai ser chamado antes de inicializar aplicação */\n  public ngOnInit(): void {\n    this.spinner.show();\n    this.getEventos();\n  }\n\n  public alterarImagem(): void {\n    this.exibirImagem = !this.exibirImagem;\n  }\n\n  public get filtroLista(): string{\n    return this.filtroListado;\n  }\n\n  public set filtroLista(value: string){\n    this.filtroListado = value;\n    // Se filtroList tem valor? Se tem valor filtra. Se não tem não, não filtra!\n    this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n  }\n\n  // Filtro efetua a busca pelo tema e local\n  filtrarEventos(filtrarPor: string): Evento[] {\n    filtrarPor = filtrarPor.toLocaleLowerCase();\n    // Pega todos os eventos e efeuta o filtro\n    return this.eventos.filter(\n      // Para cada evento dado, vai pegar o elemento evento o que você quer filtrar ex: tema ou local\n      // Exemplo 2: (evento: { tema: string, local: string })\n      (evento:  any) => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 ||\n      evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1\n    );\n  }\n\n  /*\n    Requisita do protocolo http do método get dentro da URL vai fazer o get e vai se inscrever no Observable,\n    nesse Observable retorna dois item principais que são response e error.\n  */\n  public getEventos(): void {\n    this.eventoService.getEventos().subscribe({\n      next: (eventos: Evento[]) => { // Informando a tipagem Evento[] - recebe os valores da chamada da api\n        this.eventos = eventos; // recebe o valores para atribuir em uma outra propriedes para refletir na tabela\n        this.eventosFiltrados = this.eventos;\n      },\n      error: (error: any) => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao Carregar os Eventos.', 'Erro!');\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n\n  openModal(template: TemplateRef<any>): void {\n    this.modalRef = this.modalService.show(template, {class: 'modal-sm'});\n  }\n\n  confirm(): void {\n    this.modalRef?.hide();\n    this.toastr.success('O Evento foi deletado com Sucesso.', 'Deletado!');\n  }\n\n  decline(): void {\n    this.modalRef?.hide();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}