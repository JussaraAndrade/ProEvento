{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet EventoListaComponent = class EventoListaComponent {\n  // Injeta\n  constructor(eventoService, modalService, toastr, spinner, router) {\n    this.eventoService = eventoService;\n    this.modalService = modalService;\n    this.toastr = toastr;\n    this.spinner = spinner;\n    this.router = router;\n    this.eventos = [];\n    this.eventosFiltrados = [];\n    this.larguraImagem = 150;\n    this.margemImagem = 2;\n    this.exibirImagem = true;\n    this.filtroListado = '';\n  }\n  /* Método que vai ser chamado antes de inicializar aplicação */\n  ngOnInit() {\n    this.spinner.show();\n    this.getEventos();\n  }\n  alterarImagem() {\n    this.exibirImagem = !this.exibirImagem;\n  }\n  get filtroLista() {\n    return this.filtroListado;\n  }\n  set filtroLista(value) {\n    this.filtroListado = value;\n    // Se filtroList tem valor? Se tem valor filtra. Se não tem não, não filtra!\n    this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n  }\n  // Filtro efetua a busca pelo tema e local\n  filtrarEventos(filtrarPor) {\n    filtrarPor = filtrarPor.toLocaleLowerCase();\n    // Pega todos os eventos e efeuta o filtro\n    return this.eventos.filter(\n    // Para cada evento dado, vai pegar o elemento evento o que você quer filtrar ex: tema ou local\n    // Exemplo 2: (evento: { tema: string, local: string })\n    evento => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 || evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1);\n  }\n  /*\r\n    Requisita do protocolo http do método get dentro da URL vai fazer o get e vai se inscrever no Observable,\r\n    nesse Observable retorna dois item principais que são response e error.\r\n  */\n  getEventos() {\n    this.eventoService.getEventos().subscribe({\n      next: eventos => {\n        this.eventos = eventos; // recebe o valores para atribuir em uma outra propriedes para refletir na tabela\n        this.eventosFiltrados = this.eventos;\n      },\n      error: error => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao Carregar os Eventos.', 'Erro!');\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n  openModal(template) {\n    this.modalRef = this.modalService.show(template, {\n      class: 'modal-sm'\n    });\n  }\n  confirm() {\n    this.modalRef?.hide();\n    this.toastr.success('O Evento foi deletado com Sucesso.', 'Deletado!');\n  }\n  decline() {\n    this.modalRef?.hide();\n  }\n  detalheEvento() {}\n};\nEventoListaComponent = __decorate([Component({\n  selector: 'app-evento-lista',\n  templateUrl: './evento-lista.component.html',\n  styleUrls: ['./evento-lista.component.scss']\n})], EventoListaComponent);\nexport { EventoListaComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAqB,eAAe;AAY/C,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAY/B;EACAC,YACUC,aAA4B,EAC5BC,YAA4B,EAC5BC,MAAqB,EACrBC,OAA0B,EAC1BC,MAAW;IAJX,kBAAa,GAAbJ,aAAa;IACb,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;IACN,YAAO,GAAPC,OAAO;IACP,WAAM,GAANC,MAAM;IAdhB,YAAO,GAAa,EAAE;IACtB,qBAAgB,GAAa,EAAE;IAE/B,kBAAa,GAAW,GAAG;IAC3B,iBAAY,GAAW,CAAC;IACxB,iBAAY,GAAG,IAAI;IACX,kBAAa,GAAG,EAAE;EAStB;EAEH;EACMC,QAAQ;IACb,IAAI,CAACF,OAAO,CAACG,IAAI,EAAE;IACnB,IAAI,CAACC,UAAU,EAAE;EACnB;EAEOC,aAAa;IAClB,IAAI,CAACC,YAAY,GAAG,CAAC,IAAI,CAACA,YAAY;EACxC;EAEA,IAAWC,WAAW;IACpB,OAAO,IAAI,CAACC,aAAa;EAC3B;EAEA,IAAWD,WAAW,CAACE,KAAa;IAClC,IAAI,CAACD,aAAa,GAAGC,KAAK;IAC1B;IACA,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACH,WAAW,GAAG,IAAI,CAACI,cAAc,CAAC,IAAI,CAACJ,WAAW,CAAC,GAAG,IAAI,CAACK,OAAO;EACjG;EAEA;EACAD,cAAc,CAACE,UAAkB;IAC/BA,UAAU,GAAGA,UAAU,CAACC,iBAAiB,EAAE;IAC3C;IACA,OAAO,IAAI,CAACF,OAAO,CAACG,MAAM;IACxB;IACA;IACCC,MAAY,IAAKA,MAAM,CAACC,IAAI,CAACH,iBAAiB,EAAE,CAACI,OAAO,CAACL,UAAU,CAAC,KAAK,CAAC,CAAC,IAC5EG,MAAM,CAACG,KAAK,CAACL,iBAAiB,EAAE,CAACI,OAAO,CAACL,UAAU,CAAC,KAAK,CAAC,CAAC,CAC5D;EACH;EAEA;;;;EAIOT,UAAU;IACf,IAAI,CAACP,aAAa,CAACO,UAAU,EAAE,CAACgB,SAAS,CAAC;MACxCC,IAAI,EAAGT,OAAiB,IAAI;QAC1B,IAAI,CAACA,OAAO,GAAGA,OAAO,CAAC,CAAC;QACxB,IAAI,CAACF,gBAAgB,GAAG,IAAI,CAACE,OAAO;MACtC,CAAC;MACDU,KAAK,EAAGA,KAAU,IAAI;QACpB,IAAI,CAACtB,OAAO,CAACuB,IAAI,EAAE;QACnB,IAAI,CAACxB,MAAM,CAACuB,KAAK,CAAC,8BAA8B,EAAE,OAAO,CAAC;MAC5D,CAAC;MACDE,QAAQ,EAAE,MAAM,IAAI,CAACxB,OAAO,CAACuB,IAAI;KAClC,CAAC;EACJ;EAEAE,SAAS,CAACC,QAA0B;IAClC,IAAI,CAACC,QAAQ,GAAG,IAAI,CAAC7B,YAAY,CAACK,IAAI,CAACuB,QAAQ,EAAE;MAACE,KAAK,EAAE;IAAU,CAAC,CAAC;EACvE;EAEAC,OAAO;IACL,IAAI,CAACF,QAAQ,EAAEJ,IAAI,EAAE;IACrB,IAAI,CAACxB,MAAM,CAAC+B,OAAO,CAAC,oCAAoC,EAAE,WAAW,CAAC;EACxE;EAEAC,OAAO;IACL,IAAI,CAACJ,QAAQ,EAAEJ,IAAI,EAAE;EACvB;EAEAS,aAAa,IAEb;CACD;AAvFYrC,oBAAoB,eALhCD,SAAS,CAAC;EACTuC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACWxC,oBAAoB,CAuFhC;SAvFYA,oBAAoB","names":["Component","EventoListaComponent","constructor","eventoService","modalService","toastr","spinner","router","ngOnInit","show","getEventos","alterarImagem","exibirImagem","filtroLista","filtroListado","value","eventosFiltrados","filtrarEventos","eventos","filtrarPor","toLocaleLowerCase","filter","evento","tema","indexOf","local","subscribe","next","error","hide","complete","openModal","template","modalRef","class","confirm","success","decline","detalheEvento","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Jussara\\Desktop\\ProEventos\\Front\\ProEventos-App\\src\\app\\components\\eventos\\evento-lista\\evento-lista.component.ts"],"sourcesContent":["import { Component, TemplateRef } from '@angular/core';\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { NgxSpinnerService } from 'ngx-spinner';\nimport { ToastrService } from 'ngx-toastr';\nimport { Evento } from 'src/app/models/Evento';\nimport { EventoService } from 'src/app/services/evento.service';\n\n@Component({\n  selector: 'app-evento-lista',\n  templateUrl: './evento-lista.component.html',\n  styleUrls: ['./evento-lista.component.scss']\n})\nexport class EventoListaComponent {\n  modalRef?: BsModalRef;\n  message?: string;\n\n  eventos: Evento[] = [];\n  eventosFiltrados: Evento[] = [];\n\n  larguraImagem: number = 150;\n  margemImagem: number = 2;\n  exibirImagem = true;\n  private filtroListado = '';\n\n  // Injeta\n  constructor(\n    private eventoService: EventoService,\n    private modalService: BsModalService,\n    private toastr: ToastrService,\n    private spinner: NgxSpinnerService,\n    private router: Rou\n  ) { }\n\n   /* Método que vai ser chamado antes de inicializar aplicação */\n  public ngOnInit(): void {\n    this.spinner.show();\n    this.getEventos();\n  }\n\n  public alterarImagem(): void {\n    this.exibirImagem = !this.exibirImagem;\n  }\n\n  public get filtroLista(): string{\n    return this.filtroListado;\n  }\n\n  public set filtroLista(value: string){\n    this.filtroListado = value;\n    // Se filtroList tem valor? Se tem valor filtra. Se não tem não, não filtra!\n    this.eventosFiltrados = this.filtroLista ? this.filtrarEventos(this.filtroLista) : this.eventos;\n  }\n\n  // Filtro efetua a busca pelo tema e local\n  filtrarEventos(filtrarPor: string): Evento[] {\n    filtrarPor = filtrarPor.toLocaleLowerCase();\n    // Pega todos os eventos e efeuta o filtro\n    return this.eventos.filter(\n      // Para cada evento dado, vai pegar o elemento evento o que você quer filtrar ex: tema ou local\n      // Exemplo 2: (evento: { tema: string, local: string })\n      (evento:  any) => evento.tema.toLocaleLowerCase().indexOf(filtrarPor) !== -1 ||\n      evento.local.toLocaleLowerCase().indexOf(filtrarPor) !== -1\n    );\n  }\n\n  /*\n    Requisita do protocolo http do método get dentro da URL vai fazer o get e vai se inscrever no Observable,\n    nesse Observable retorna dois item principais que são response e error.\n  */\n  public getEventos(): void {\n    this.eventoService.getEventos().subscribe({\n      next: (eventos: Evento[]) => { // Informando a tipagem Evento[] - recebe os valores da chamada da api\n        this.eventos = eventos; // recebe o valores para atribuir em uma outra propriedes para refletir na tabela\n        this.eventosFiltrados = this.eventos;\n      },\n      error: (error: any) => {\n        this.spinner.hide();\n        this.toastr.error('Erro ao Carregar os Eventos.', 'Erro!');\n      },\n      complete: () => this.spinner.hide()\n    });\n  }\n\n  openModal(template: TemplateRef<any>): void {\n    this.modalRef = this.modalService.show(template, {class: 'modal-sm'});\n  }\n\n  confirm(): void {\n    this.modalRef?.hide();\n    this.toastr.success('O Evento foi deletado com Sucesso.', 'Deletado!');\n  }\n\n  decline(): void {\n    this.modalRef?.hide();\n  }\n\n  detalheEvento(): void{\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}